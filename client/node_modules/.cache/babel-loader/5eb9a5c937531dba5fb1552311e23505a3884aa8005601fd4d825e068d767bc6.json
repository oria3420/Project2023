{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\nconst crypto = require(\"crypto\");\nconst http = require(\"http\");\nconst url = require(\"url\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    if ('kModuleError' in deps_1.aws4) {\n      return callback(deps_1.aws4['kModuleError']);\n    }\n    const {\n      sign\n    } = deps_1.aws4;\n    if ((0, utils_1.maxWireVersion)(connection) < 9) {\n      callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({\n          r: nonce,\n          p: ASCII_N\n        }, bsonOptions)\n      };\n      connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(\n          // TODO(NODE-3483)\n          new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n          // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n          // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, awsCredentials);\n        const payload = {\n          a: options.headers.Authorization,\n          d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n        connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n}\nexports.MongoDBAWS = MongoDBAWS;\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n    callback(undefined, new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  }\n  const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if ('kModuleError' in credentialProvider) {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n        if (err) return callback(err);\n        done(res);\n      });\n      return;\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    request(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token-ttl-seconds': 30\n      }\n    }, (err, token) => {\n      if (err) return callback(err);\n      // get role name\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n        json: false,\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, roleName) => {\n        if (err) return callback(err);\n        // get temp credentials\n        request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n          headers: {\n            'X-aws-ec2-metadata-token': token\n          }\n        }, (err, creds) => {\n          if (err) return callback(err);\n          done(creds);\n        });\n      });\n    });\n  } else {\n    /*\n     * Creates a credential provider that will attempt to find credentials from the\n     * following sources (listed in order of precedence):\n     *\n     * - Environment variables exposed via process.env\n     * - SSO credentials from token cache\n     * - Web identity token credentials\n     * - Shared credentials and config ini files\n     * - The EC2/ECS Instance Metadata Service\n     */\n    const {\n      fromNodeProviderChain\n    } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    provider().then(creds => {\n      done({\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      });\n    }).catch(error => {\n      callback(new error_1.MongoAWSError(error.message));\n    });\n  }\n}\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}\nfunction request(uri, _options, callback) {\n  const options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), _options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('timeout', () => {\n    req.destroy(new error_1.MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`));\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}","map":{"version":3,"names":["crypto","require","http","url","BSON","deps_1","error_1","utils_1","auth_provider_1","mongo_credentials_1","providers_1","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","MongoDBAWS","AuthProvider","auth","authContext","callback","connection","credentials","MongoMissingCredentialsError","aws4","sign","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","err","tempCredentials","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","db","source","randomBytes","nonce","saslStart","mechanism","payload","serialize","r","p","command","ns","res","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","MongoRuntimeError","ByteUtils","equals","subarray","byteLength","indexOf","body","options","method","region","deriveRegion","service","headers","toBase64","path","a","Authorization","d","t","saslContinue","conversationId","exports","done","creds","AccessKeyId","SecretAccessKey","Token","MongoCredentials","AuthMechanism","MONGODB_AWS","credentialProvider","getAwsCredentialProvider","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","json","token","roleName","fromNodeProviderChain","provider","then","Expiration","expiration","catch","error","MongoAWSError","message","parts","split","uri","_options","Object","assign","timeout","parse","req","setEncoding","data","on","parsed","JSON","destroy","end"],"sources":["C:\\Users\\oria3\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_aws.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport * as http from 'http';\nimport * as url from 'url';\n\nimport type { Binary, BSONSerializeOptions } from '../../bson';\nimport * as BSON from '../../bson';\nimport { aws4, getAwsCredentialProvider } from '../../deps';\nimport {\n  MongoAWSError,\n  MongoCompatibilityError,\n  MongoMissingCredentialsError,\n  MongoRuntimeError\n} from '../../error';\nimport { ByteUtils, Callback, maxWireVersion, ns } from '../../utils';\nimport { AuthContext, AuthProvider } from './auth_provider';\nimport { MongoCredentials } from './mongo_credentials';\nimport { AuthMechanism } from './providers';\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions: BSONSerializeOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\ninterface AWSSaslContinuePayload {\n  a: string;\n  d: string;\n  t?: string;\n}\n\nexport class MongoDBAWS extends AuthProvider {\n  override auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    if ('kModuleError' in aws4) {\n      return callback(aws4['kModuleError']);\n    }\n    const { sign } = aws4;\n\n    if (maxWireVersion(connection) < 9) {\n      callback(\n        new MongoCompatibilityError(\n          'MONGODB-AWS authentication requires MongoDB version 4.4 or later'\n        )\n      );\n      return;\n    }\n\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n\n      return;\n    }\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials =\n      accessKeyId && secretAccessKey && sessionToken\n        ? { accessKeyId, secretAccessKey, sessionToken }\n        : accessKeyId && secretAccessKey\n        ? { accessKeyId, secretAccessKey }\n        : undefined;\n\n    const db = credentials.source;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n      };\n\n      connection.command(ns(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions) as {\n          s: Binary;\n          h: string;\n        };\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(\n            // TODO(NODE-3483)\n            new MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`)\n          );\n\n          return;\n        }\n\n        if (!ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n          // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n          // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n\n          // TODO(NODE-3483)\n          callback(new MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign(\n          {\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Content-Length': body.length,\n              'X-MongoDB-Server-Nonce': ByteUtils.toBase64(serverNonce),\n              'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n          },\n          awsCredentials\n        );\n\n        const payload: AWSSaslContinuePayload = {\n          a: options.headers.Authorization,\n          d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n\n        connection.command(ns(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n}\n\ninterface AWSTempCredentials {\n  AccessKeyId?: string;\n  SecretAccessKey?: string;\n  Token?: string;\n  RoleArn?: string;\n  Expiration?: Date;\n}\n\n/* @internal */\nexport interface AWSCredentials {\n  accessKeyId?: string;\n  secretAccessKey?: string;\n  sessionToken?: string;\n  expiration?: Date;\n}\n\nfunction makeTempCredentials(credentials: MongoCredentials, callback: Callback<MongoCredentials>) {\n  function done(creds: AWSTempCredentials) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(\n        new MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials')\n      );\n      return;\n    }\n\n    callback(\n      undefined,\n      new MongoCredentials({\n        username: creds.AccessKeyId,\n        password: creds.SecretAccessKey,\n        source: credentials.source,\n        mechanism: AuthMechanism.MONGODB_AWS,\n        mechanismProperties: {\n          AWS_SESSION_TOKEN: creds.Token\n        }\n      })\n    );\n  }\n\n  const credentialProvider = getAwsCredentialProvider();\n\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if ('kModuleError' in credentialProvider) {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      request(\n        `${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`,\n        undefined,\n        (err, res) => {\n          if (err) return callback(err);\n          done(res);\n        }\n      );\n\n      return;\n    }\n\n    // Otherwise assume we are on an EC2 instance\n\n    // get a token\n    request(\n      `${AWS_EC2_URI}/latest/api/token`,\n      { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } },\n      (err, token) => {\n        if (err) return callback(err);\n\n        // get role name\n        request(\n          `${AWS_EC2_URI}/${AWS_EC2_PATH}`,\n          { json: false, headers: { 'X-aws-ec2-metadata-token': token } },\n          (err, roleName) => {\n            if (err) return callback(err);\n\n            // get temp credentials\n            request(\n              `${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`,\n              { headers: { 'X-aws-ec2-metadata-token': token } },\n              (err, creds) => {\n                if (err) return callback(err);\n                done(creds);\n              }\n            );\n          }\n        );\n      }\n    );\n  } else {\n    /*\n     * Creates a credential provider that will attempt to find credentials from the\n     * following sources (listed in order of precedence):\n     *\n     * - Environment variables exposed via process.env\n     * - SSO credentials from token cache\n     * - Web identity token credentials\n     * - Shared credentials and config ini files\n     * - The EC2/ECS Instance Metadata Service\n     */\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    provider()\n      .then((creds: AWSCredentials) => {\n        done({\n          AccessKeyId: creds.accessKeyId,\n          SecretAccessKey: creds.secretAccessKey,\n          Token: creds.sessionToken,\n          Expiration: creds.expiration\n        });\n      })\n      .catch((error: Error) => {\n        callback(new MongoAWSError(error.message));\n      });\n  }\n}\n\nfunction deriveRegion(host: string) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\ninterface RequestOptions {\n  json?: boolean;\n  method?: string;\n  timeout?: number;\n  headers?: http.OutgoingHttpHeaders;\n}\n\nfunction request(uri: string, _options: RequestOptions | undefined, callback: Callback) {\n  const options = Object.assign(\n    {\n      method: 'GET',\n      timeout: 10000,\n      json: true\n    },\n    url.parse(uri),\n    _options\n  );\n\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n\n    let data = '';\n    res.on('data', d => (data += d));\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n\n  req.on('timeout', () => {\n    req.destroy(new MongoAWSError(`AWS request to ${uri} timed out after ${options.timeout} ms`));\n  });\n\n  req.on('error', err => callback(err));\n  req.end();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}