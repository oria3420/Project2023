{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oria3\\\\Desktop\\\\\\u05DB\\u05DC\\u05DC\\u05D9\\\\\\u05DC\\u05D9\\u05DE\\u05D5\\u05D3\\u05D9\\u05DD\\\\\\u05E9\\u05E0\\u05D4 \\u05D2\\\\\\u05E4\\u05E8\\u05D5\\u05D9\\u05D9\\u05E7\\u05D8 \\u05D2\\u05DE\\u05E8\\\\code\\\\client\\\\src\\\\pages\\\\Recipe.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport Navbar from '../components/Navbar';\nimport StarRating from '../components/StarRating';\nimport Loading from '../components/Loading';\nimport NutritionTable from '../components/NutritionTable';\nimport { useLocation } from 'react-router-dom';\nimport './Recipe.css';\nimport LikeButton from '../components/LikeBtn';\nimport CommentsContainer from '../components/CommentsContainer';\nimport Carousel from '../components/Carousel';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultImageUrl = '/images/logo-image.png';\nconst RecipePage = () => {\n  _s();\n  let user_name;\n  let user_id;\n  const location = useLocation();\n  if (location.state !== null) {\n    user_name = location.state.name;\n    user_id = location.state.user_id;\n  } else {\n    user_name = \"Guest\";\n    user_id = \"Guest\";\n  }\n  const {\n    id\n  } = useParams();\n  const [recipe, setRecipe] = useState(null);\n  const [imageUrl, setImageUrls] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [recipeTags, setRecipeTags] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchData = useCallback(async () => {\n    try {\n      // const [tagsResponse, recipeResponse, ingredientsResponse, imagesResponse] = await Promise.all([\n      //   fetch(`http://localhost:1337/api/recipes/${id}/tags`),\n      //   fetch(`http://localhost:1337/api/recipes/${id}`),\n      //   fetch(`http://localhost:1337/api/recipes/${id}/ingredients`),\n      //   fetch(`http://localhost:1337/api/recipes/images/${id}`),\n      // ]);\n\n      // const [tags, recipeData, ingredients, imageData] = await Promise.all([\n      //   tagsResponse.json(),\n      //   recipeResponse.json(),\n      //   ingredientsResponse.json(),\n      //   imagesResponse.ok ? imagesResponse.json() : [],\n      // ]);\n\n      // setRecipeTags(tags);\n      // setRecipe(recipeData);\n      // setIngredients(ingredients);\n\n      // if (Array.isArray(imageData) && imageData.length > 0) {\n      //   const urls = await Promise.all(\n      //     imageData.map(async (imageData) => {\n      //       if (typeof imageData === 'string' && imageData.startsWith('http')) {\n      //         // Check if the URL is valid\n      //         const urlResponse = await fetch(imageData, { method: 'HEAD' });\n      //         if (urlResponse.ok) {\n      //           return imageData;\n      //         } else {\n      //           console.warn(`Invalid URL: ${imageData}`);\n      //           return null;\n      //         }\n      //       }\n      //       else if (\n      //         imageData &&\n      //         imageData.filename &&\n      //         imageData.fileId\n      //       ) {\n      //         const imageResponse = await fetch(\n      //           `http://localhost:1337/api/addRecipe/images/${imageData.fileId}`\n      //         );\n      //         if (imageResponse.ok) {\n      //           const imageUrl = URL.createObjectURL(\n      //             await imageResponse.blob()\n      //           );\n      //           return imageUrl;\n      //         }\n      //       } else {\n      //         console.warn(`Invalid URL format: ${imageData}`);\n      //         return null;\n      //       }\n      //     })\n      //   );\n      //   const filteredUrls = urls.filter((url) => url !== null);\n      //   setImageUrls(filteredUrls.length > 0 ? filteredUrls : [defaultImageUrl]);\n      // } else {\n      //   setImageUrls([defaultImageUrl]);\n      // }\n\n      setLoading(false);\n    } catch (error) {\n      console.error(error);\n      setLoading(false);\n    }\n  }, [id]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  function formatDate(inputDate) {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Date(inputDate).toLocaleDateString('en-US', options);\n  }\n  function capitalizeFirstLetter(text) {\n    return text && text.charAt(0).toUpperCase() + text.slice(1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      name: user_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), user_name && !loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recipe-container\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Hello\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(RecipePage, \"S/dFOmcJt3A/HVEjx+25NhqSr4o=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = RecipePage;\nexport default RecipePage;\nvar _c;\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","Navbar","StarRating","Loading","NutritionTable","useLocation","LikeButton","CommentsContainer","Carousel","jsxDEV","_jsxDEV","defaultImageUrl","RecipePage","_s","user_name","user_id","location","state","name","id","recipe","setRecipe","imageUrl","setImageUrls","ingredients","setIngredients","recipeTags","setRecipeTags","loading","setLoading","fetchData","error","console","formatDate","inputDate","options","year","month","day","Date","toLocaleDateString","capitalizeFirstLetter","text","charAt","toUpperCase","slice","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/oria3/Desktop/כללי/לימודים/שנה ג/פרוייקט גמר/code/client/src/pages/Recipe.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Navbar from '../components/Navbar';\r\nimport StarRating from '../components/StarRating';\r\nimport Loading from '../components/Loading';\r\nimport NutritionTable from '../components/NutritionTable';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Recipe.css';\r\nimport LikeButton from '../components/LikeBtn';\r\nimport CommentsContainer from '../components/CommentsContainer';\r\nimport Carousel from '../components/Carousel';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\n\r\n\r\n\r\nconst defaultImageUrl = '/images/logo-image.png'\r\n\r\nconst RecipePage = () => {\r\n  let user_name\r\n  let user_id\r\n  const location = useLocation();\r\n  if (location.state !== null) {\r\n    user_name = location.state.name;\r\n    user_id = location.state.user_id;\r\n  }\r\n  else {\r\n    user_name = \"Guest\"\r\n    user_id = \"Guest\"\r\n  }\r\n\r\n  const { id } = useParams();\r\n  const [recipe, setRecipe] = useState(null);\r\n  const [imageUrl, setImageUrls] = useState([]);\r\n  const [ingredients, setIngredients] = useState([]);\r\n  const [recipeTags, setRecipeTags] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  \r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      // const [tagsResponse, recipeResponse, ingredientsResponse, imagesResponse] = await Promise.all([\r\n      //   fetch(`http://localhost:1337/api/recipes/${id}/tags`),\r\n      //   fetch(`http://localhost:1337/api/recipes/${id}`),\r\n      //   fetch(`http://localhost:1337/api/recipes/${id}/ingredients`),\r\n      //   fetch(`http://localhost:1337/api/recipes/images/${id}`),\r\n      // ]);\r\n\r\n      // const [tags, recipeData, ingredients, imageData] = await Promise.all([\r\n      //   tagsResponse.json(),\r\n      //   recipeResponse.json(),\r\n      //   ingredientsResponse.json(),\r\n      //   imagesResponse.ok ? imagesResponse.json() : [],\r\n      // ]);\r\n\r\n      // setRecipeTags(tags);\r\n      // setRecipe(recipeData);\r\n      // setIngredients(ingredients);\r\n\r\n      // if (Array.isArray(imageData) && imageData.length > 0) {\r\n      //   const urls = await Promise.all(\r\n      //     imageData.map(async (imageData) => {\r\n      //       if (typeof imageData === 'string' && imageData.startsWith('http')) {\r\n      //         // Check if the URL is valid\r\n      //         const urlResponse = await fetch(imageData, { method: 'HEAD' });\r\n      //         if (urlResponse.ok) {\r\n      //           return imageData;\r\n      //         } else {\r\n      //           console.warn(`Invalid URL: ${imageData}`);\r\n      //           return null;\r\n      //         }\r\n      //       }\r\n      //       else if (\r\n      //         imageData &&\r\n      //         imageData.filename &&\r\n      //         imageData.fileId\r\n      //       ) {\r\n      //         const imageResponse = await fetch(\r\n      //           `http://localhost:1337/api/addRecipe/images/${imageData.fileId}`\r\n      //         );\r\n      //         if (imageResponse.ok) {\r\n      //           const imageUrl = URL.createObjectURL(\r\n      //             await imageResponse.blob()\r\n      //           );\r\n      //           return imageUrl;\r\n      //         }\r\n      //       } else {\r\n      //         console.warn(`Invalid URL format: ${imageData}`);\r\n      //         return null;\r\n      //       }\r\n      //     })\r\n      //   );\r\n      //   const filteredUrls = urls.filter((url) => url !== null);\r\n      //   setImageUrls(filteredUrls.length > 0 ? filteredUrls : [defaultImageUrl]);\r\n      // } else {\r\n      //   setImageUrls([defaultImageUrl]);\r\n      // }\r\n\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(error);\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n \r\n  function formatDate(inputDate) {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n    return new Date(inputDate).toLocaleDateString('en-US', options);\r\n  }\r\n\r\n  function capitalizeFirstLetter(text) {\r\n    return text && text.charAt(0).toUpperCase() + text.slice(1);\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navbar name={user_name} />\r\n      {user_name && !loading ? (\r\n          <div className='recipe-container'>\r\n          <span>Hello</span>\r\n          {/*\r\n            <div className='recipe-header'>\r\n\r\n              <div className='recipe-details'>\r\n\r\n                <h2 id=\"recipe-name\">{capitalizeFirstLetter(recipe.Name)}</h2>\r\n                <div id=\"author-date\">\r\n                  <span>{\"Recipe by \" + recipe.AuthorName}</span>\r\n                  <span className=\"author-separator\"></span>\r\n                  <span>{\"Published on \" + formatDate(recipe.DatePublished)}</span>\r\n                </div>\r\n\r\n                <StarRating rating={recipe.AggregatedRating} reviewCount={recipe.ReviewCount} />\r\n\r\n                <div className='times-container'>\r\n                  {[\"PrepTime\", \"CookTime\", \"TotalTime\"].map((timeKey, index) => (\r\n                    <React.Fragment key={timeKey}>\r\n                      <div className='time'>\r\n                        <span id=\"time-number\">{recipe[timeKey] || \"0S\"}</span>\r\n                        <span id=\"time-text\">{index === 0 ? \"Prep\" : index === 1 ? \"Cook\" : \"Total\"} <br /> Time</span>\r\n                      </div>\r\n                      {index < 2 && <div className='time-separator'></div>}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </div>\r\n\r\n                <LikeButton recipeId={id} userEmail={user_id} pageType=\"RecipePage\" />\r\n\r\n              </div>\r\n\r\n              <div className='recipe-image-container'>\r\n                {imageUrl.length > 1 ? (\r\n                  <Carousel id='carousel' images={imageUrl} />\r\n                ) : (\r\n                  <img className=\"recipe-image\" src={imageUrl[0]} alt=\"Card cap\"></img>\r\n                )}\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div className='description'>\r\n              <div className='description-text'>\r\n                <p>{capitalizeFirstLetter(recipe.Description)}</p>\r\n\r\n              </div>\r\n              <div className='description-details'>\r\n                {recipe.RecipeServings || recipe.RecipeYield ? (\r\n                  <p>\r\n                    <i className=\"icon-recipe fa-solid fa-utensils fa-2xl\"></i>\r\n                    <span className=\"bold-text\">Servings: </span>\r\n                    <span>{recipe.RecipeServings || recipe.RecipeYield}</span>\r\n                  </p>\r\n                ) : null}\r\n                {recipe.Kosher ? (\r\n                  <p>\r\n                    <i className=\"icon-recipe fa-solid fa-bowl-food fa-2xl\"></i>\r\n                    <span className=\"bold-text\">Kosher: </span>\r\n                    <span> {capitalizeFirstLetter(recipe.Kosher)}</span>\r\n                  </p>\r\n                ) : null}\r\n                {recipe.RecipeCategory ? (\r\n                  <p>\r\n                    <i className=\"icon-recipe fa-solid fa-spoon fa-2xl\"></i>\r\n                    <span className=\"bold-text\">Category: </span>\r\n                    <span> {capitalizeFirstLetter(recipe.RecipeCategory)}</span>\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n\r\n            <div className='recipe-body'>\r\n\r\n              <div className='ingredients-container'>\r\n                <div className='ingredients'>\r\n                  <span className=\"title\">Ingredients</span>\r\n                  {ingredients.map((ingredient, index) => (\r\n                    <div className='step-container' key={index}>\r\n                      <span className='ingredient-text' key={ingredient.name}>\r\n                        {ingredient.amount && ingredient.measurement ? (\r\n                          `${ingredient.amount} ${ingredient.measurement} of ${ingredient.name}`\r\n                        ) : (\r\n                          ingredient.name\r\n                        )}\r\n                      </span>\r\n                      <br key={`br-${index}`} />\r\n                    </div>\r\n                  ))}\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n              <div className='instructions'>\r\n                <span className='title'>Instructions</span>\r\n                {recipe.RecipeInstructions.split('.').map((instruction, index) => {\r\n                  const formattedInstruction = instruction.trim().charAt(0).toUpperCase() + instruction.trim().slice(1);\r\n                  return instruction.trim() !== \"\" && (\r\n                    <div className='step-container' key={index}>\r\n                      <span className='step-index'>{index < 9 ? \"0\" : \"\"}{index + 1}. </span>\r\n                      <span className='step-text'>{formattedInstruction}.</span>\r\n                      <br />\r\n                    </div>\r\n                  );\r\n                })}\r\n                <br />\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <NutritionTable recipe={recipe} />\r\n\r\n            <div className='tags-container-recipe'>\r\n              <div className='title'>\r\n                <i className=\"tags-icon bi bi-bookmarks-fill\"></i>\r\n                Recipe Tags\r\n              </div>\r\n\r\n              {recipeTags.map((tag, index) => (\r\n                <span key={index} className='tag'>\r\n                  {tag}\r\n                </span>\r\n              ))}\r\n\r\n            </div>\r\n\r\n            <CommentsContainer id={id} user_id={user_id} user_name={user_name} recipe={recipe} />\r\n\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            */}\r\n          </div>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default RecipePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}