{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n  if (typeof options.srvHost !== 'string') {\n    throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n  if (addresses.length === 0) {\n    throw new error_1.MongoAPIError('No addresses found at host');\n  }\n  for (const {\n    name\n  } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n  const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n  if (record.length > 1) {\n    throw new error_1.MongoParseError('Multiple text records not allowed');\n  }\n  const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n  if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n      source\n    });\n  }\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n    return false;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  }));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  checkTLSOptions(allOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n  let loggerEnvOptions = {};\n  let loggerClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target ?? key;\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform(_ref3) {\n      let {\n        options,\n        values: [value]\n      } = _ref3;\n      return (0, utils_1.makeClientMetadata)({\n        ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform(_ref4) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref4;\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform(_ref5) {\n      let {\n        options,\n        values: [value]\n      } = _ref5;\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = options.credentials?.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform(_ref6) {\n      let {\n        options,\n        values: [optionValue]\n      } = _ref6;\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform(_ref7) {\n      let {\n        options,\n        values: [value]\n      } = _ref7;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform(_ref8) {\n      let {\n        values: [version]\n      } = _ref8;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform(_ref9) {\n      let {\n        values\n      } = _ref9;\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n    transform(_ref10) {\n      let {\n        options,\n        values: [value]\n      } = _ref10;\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref11) {\n      let {\n        name,\n        values: [value]\n      } = _ref11;\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref13) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref13;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform(_ref15) {\n      let {\n        name,\n        values: [value]\n      } = _ref15;\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform(_ref16) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref16;\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform(_ref17) {\n      let {\n        values: [value],\n        options\n      } = _ref17;\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform(_ref18) {\n      let {\n        values: [value]\n      } = _ref18;\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform(_ref20) {\n      let {\n        values: [level],\n        options\n      } = _ref20;\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform(_ref21) {\n      let {\n        values: [value],\n        options\n      } = _ref21;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform(_ref22) {\n      let {\n        values,\n        options\n      } = _ref22;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform(_ref23) {\n      let {\n        values: [value]\n      } = _ref23;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform(_ref24) {\n      let {\n        values: [value]\n      } = _ref24;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform(_ref25) {\n      let {\n        values: [value]\n      } = _ref25;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform(_ref26) {\n      let {\n        values: [value]\n      } = _ref26;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform(_ref27) {\n      let {\n        name,\n        values: [value]\n      } = _ref27;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform(_ref28) {\n      let {\n        name,\n        values: [value]\n      } = _ref28;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform(_ref29) {\n      let {\n        values: [value]\n      } = _ref29;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform(_ref30) {\n      let {\n        values: [value]\n      } = _ref30;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform(_ref31) {\n      let {\n        values: [value]\n      } = _ref31;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref32) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref32;\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform(_ref33) {\n      let {\n        values: [value],\n        options\n      } = _ref33;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform(_ref34) {\n      let {\n        values: [value],\n        options\n      } = _ref34;\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform(_ref35) {\n      let {\n        values: [value],\n        options\n      } = _ref35;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform(_ref36) {\n      let {\n        values: [value],\n        options\n      } = _ref36;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref37 => {\n  let [, descriptor] = _ref37;\n  return descriptor.default != null;\n}).map(_ref38 => {\n  let [k, d] = _ref38;\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger')]);","map":{"version":3,"names":["dns","require","fs","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","compression_1","encrypter_1","error_1","mongo_client_1","mongo_logger_1","read_concern_1","read_preference_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","srvHost","MongoAPIError","split","length","lookupAddress","addresses","promises","resolveSrv","srvServiceName","name","hostAddresses","map","r","HostAddress","fromString","port","validateLoadBalancedOptions","record","resolveTxt","error","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","allOptions","check","a","b","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","emitWarningOnce","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","arguments","_ref","k","v","set","delete","parseOptions","uri","mongoClient","MongoClient","url","default","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","FEATURE_FLAGS","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","_ref2","allKeys","DEFAULT_OPTIONS","objectOptionValue","push","urlValue","defaultOptionsValue","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","s","optionWord","isOrAre","descriptor","setOption","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","MongoMissingCredentialsError","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongoLoggerOptions","MongoLogger","resolveOptions","isSrv","target","type","transform","deprecated","deprecatedMsg","emitWarning","isRecord","transformValue","appName","_ref3","makeClientMetadata","driverInfo","_ref4","authMechanism","_ref5","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","_ref6","optionValue","authSource","_ref7","bsonRegExp","serverApi","_ref8","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","_ref9","compressionList","compVal","compValArray","isArray","MongoInvalidArgumentError","c","Compressor","add","connectTimeoutMS","_ref10","metadata","application","enableUtf8Validation","family","_ref11","fieldsAsRaw","forceServerObjectId","fsync","_ref12","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","_ref13","journal","_ref14","keepAlive","keepAliveInitialDelay","localThresholdMS","maxConnecting","_ref15","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","_ref16","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","_ref17","noDelay","pkFactory","DEFAULT_PK_FACTORY","_ref18","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","_ref19","ReadConcern","JSON","stringify","readConcernLevel","_ref20","level","primary","_ref21","rp","rpOpts","hedge","tags","readPreferenceTags","_ref22","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","_ref23","readFileSync","encoding","sslCRL","_ref24","sslCert","_ref25","sslKey","_ref26","sslPass","sslValidate","tlsAllowInvalidCertificates","_ref27","tlsAllowInvalidHostnames","_ref28","tlsCAFile","_ref29","tlsCertificateFile","_ref30","tlsCertificateKeyFile","_ref31","tlsCertificateKeyFilePassword","tlsInsecure","_ref32","checkServerIdentity","rejectUnauthorized","w","_ref33","waitQueueTimeoutMS","_ref34","wtimeout","_ref35","wtimeoutMS","_ref36","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","_ref37","_ref38","d"],"sources":["C:\\Users\\oria3\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoParseError\n} from './error';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { MongoLogger, MongoLoggerEnvOptions, MongoLoggerMongoClientOptions } from './mongo_logger';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  emitWarningOnce,\n  HostAddress,\n  isRecord,\n  makeClientMetadata,\n  parseInteger,\n  setDifference\n} from './utils';\nimport { W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\n  if (typeof options.srvHost !== 'string') {\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(\n    `_${options.srvServiceName}._tcp.${lookupAddress}`\n  );\n\n  if (addresses.length === 0) {\n    throw new MongoAPIError('No addresses found at host');\n  }\n\n  for (const { name } of addresses) {\n    if (!matchesParentDomain(name, lookupAddress)) {\n      throw new MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n  if (\n    !options.userSpecifiedAuthSource &&\n    source &&\n    options.credentials &&\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n  ) {\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  return hostAddresses;\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\n  if (!allOptions) return;\n  const check = (a: string, b: string) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\n      );\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\n      );\n    }\n    return false;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getIntFromOptions(name: string, value: unknown): number {\n  const parsedInt = parseInteger(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name: string, value: unknown): number {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<any[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || [])\n      .concat(allOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allOptions);\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new MongoMissingCredentialsError(\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\n      );\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n\n  let loggerEnvOptions: MongoLoggerEnvOptions = {};\n  let loggerClientOptions: MongoLoggerMongoClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\n    loggerEnvOptions,\n    loggerClientOptions\n  );\n\n  return mongoOptions;\n}\n\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): void {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [optionValue] }): MongoCredentials {\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!isRecord(optionValue)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: optionValue });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([\n  Symbol.for('@@mdb.skipPingOnConnect'),\n  Symbol.for('@@mdb.enableMongoLogger')\n]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}