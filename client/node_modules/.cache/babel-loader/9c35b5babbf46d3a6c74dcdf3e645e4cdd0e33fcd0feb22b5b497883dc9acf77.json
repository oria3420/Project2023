{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.connect = void 0;\nconst net = require(\"net\");\nconst socks_1 = require(\"socks\");\nconst tls = require(\"tls\");\nconst bson_1 = require(\"../bson\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst auth_provider_1 = require(\"./auth/auth_provider\");\nconst gssapi_1 = require(\"./auth/gssapi\");\nconst mongocr_1 = require(\"./auth/mongocr\");\nconst mongodb_aws_1 = require(\"./auth/mongodb_aws\");\nconst plain_1 = require(\"./auth/plain\");\nconst providers_1 = require(\"./auth/providers\");\nconst scram_1 = require(\"./auth/scram\");\nconst x509_1 = require(\"./auth/x509\");\nconst connection_1 = require(\"./connection\");\nconst constants_2 = require(\"./wire_protocol/constants\");\nconst AUTH_PROVIDERS = new Map([[providers_1.AuthMechanism.MONGODB_AWS, new mongodb_aws_1.MongoDBAWS()], [providers_1.AuthMechanism.MONGODB_CR, new mongocr_1.MongoCR()], [providers_1.AuthMechanism.MONGODB_GSSAPI, new gssapi_1.GSSAPI()], [providers_1.AuthMechanism.MONGODB_PLAIN, new plain_1.Plain()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, new scram_1.ScramSHA1()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, new scram_1.ScramSHA256()], [providers_1.AuthMechanism.MONGODB_X509, new x509_1.X509()]]);\nfunction connect(options, callback) {\n  makeConnection({\n    ...options,\n    existingSocket: undefined\n  }, (err, socket) => {\n    if (err || !socket) {\n      return callback(err);\n    }\n    let ConnectionType = options.connectionType ?? connection_1.Connection;\n    if (options.autoEncrypter) {\n      ConnectionType = connection_1.CryptoConnection;\n    }\n    performInitialHandshake(new ConnectionType(socket, options), options, callback);\n  });\n}\nexports.connect = connect;\nfunction checkSupportedServer(hello, options) {\n  const serverVersionHighEnough = hello && (typeof hello.maxWireVersion === 'number' || hello.maxWireVersion instanceof bson_1.Int32) && hello.maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough = hello && (typeof hello.minWireVersion === 'number' || hello.minWireVersion instanceof bson_1.Int32) && hello.minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n  }\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n  return new error_1.MongoCompatibilityError(message);\n}\nfunction performInitialHandshake(conn, options, _callback) {\n  const callback = function (err, ret) {\n    if (err && conn) {\n      conn.destroy();\n    }\n    _callback(err, ret);\n  };\n  const credentials = options.credentials;\n  if (credentials) {\n    if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) && !AUTH_PROVIDERS.get(credentials.mechanism)) {\n      callback(new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`));\n      return;\n    }\n  }\n  const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n  prepareHandshakeDocument(authContext, (err, handshakeDoc) => {\n    if (err || !handshakeDoc) {\n      return callback(err);\n    }\n    const handshakeOptions = Object.assign({}, options);\n    if (typeof options.connectTimeoutMS === 'number') {\n      // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n      handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    conn.command((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      if (response?.ok === 0) {\n        callback(new error_1.MongoServerError(response));\n        return;\n      }\n      if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      if (response.helloOk) {\n        conn.helloOk = true;\n      }\n      const supportedServerErr = checkSupportedServer(response, options);\n      if (supportedServerErr) {\n        callback(supportedServerErr);\n        return;\n      }\n      if (options.loadBalanced) {\n        if (!response.serviceId) {\n          return callback(new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' + 'but the server does not support this mode.'));\n        }\n      }\n      // NOTE: This is metadata attached to the connection while porting away from\n      //       handshake being done in the `Server` class. Likely, it should be\n      //       relocated, or at very least restructured.\n      conn.hello = response;\n      conn.lastHelloMS = new Date().getTime() - start;\n      if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n          return callback(new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`));\n        }\n        provider.auth(authContext, err => {\n          if (err) {\n            if (err instanceof error_1.MongoError) {\n              err.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n              if ((0, error_1.needsRetryableWriteLabel)(err, response.maxWireVersion)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n              }\n            }\n            return callback(err);\n          }\n          callback(undefined, conn);\n        });\n        return;\n      }\n      callback(undefined, conn);\n    });\n  });\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nfunction prepareHandshakeDocument(authContext, callback) {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const {\n    serverApi\n  } = authContext.connection;\n  const handshakeDoc = {\n    [serverApi?.version ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n    helloOk: true,\n    client: options.metadata || (0, utils_1.makeClientMetadata)(options),\n    compression: compressors\n  };\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n      const provider = AUTH_PROVIDERS.get(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n      if (!provider) {\n        // This auth mechanism is always present.\n        return callback(new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`));\n      }\n      return provider.prepare(handshakeDoc, authContext, callback);\n    }\n    const provider = AUTH_PROVIDERS.get(credentials.mechanism);\n    if (!provider) {\n      return callback(new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`));\n    }\n    return provider.prepare(handshakeDoc, authContext, callback);\n  }\n  callback(undefined, handshakeDoc);\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = ['ALPNProtocols', 'ca', 'cert', 'checkServerIdentity', 'ciphers', 'crl', 'ecdhCurve', 'key', 'minDHSize', 'passphrase', 'pfx', 'rejectUnauthorized', 'secureContext', 'secureProtocol', 'servername', 'session'];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = ['family', 'hints', 'localAddress', 'localPort', 'lookup'];\nfunction parseConnectOptions(options) {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n  const result = {};\n  for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\nfunction parseSslOptions(options) {\n  const result = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      result[name] = options[name];\n    }\n  }\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n  return result;\n}\nconst SOCKET_ERROR_EVENT_LIST = ['error', 'close', 'timeout', 'parseError'];\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\nfunction makeConnection(options, _callback) {\n  const useTLS = options.tls ?? false;\n  const keepAlive = options.keepAlive ?? true;\n  const socketTimeoutMS = options.socketTimeoutMS ?? Reflect.get(options, 'socketTimeout') ?? 0;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const rejectUnauthorized = options.rejectUnauthorized ?? true;\n  const keepAliveInitialDelay = ((options.keepAliveInitialDelay ?? 120000) > socketTimeoutMS ? Math.round(socketTimeoutMS / 2) : options.keepAliveInitialDelay) ?? 120000;\n  const existingSocket = options.existingSocket;\n  let socket;\n  const callback = function (err, ret) {\n    if (err && socket) {\n      socket.destroy();\n    }\n    _callback(err, ret);\n  };\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return makeSocks5Connection({\n      ...options,\n      connectTimeoutMS // Should always be present for Socks5\n    }, callback);\n  }\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n  const connectEvent = useTLS ? 'secureConnect' : 'connect';\n  let cancellationHandler;\n  function errorHandler(eventName) {\n    return err => {\n      SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n      if (cancellationHandler && options.cancellationToken) {\n        options.cancellationToken.removeListener('cancel', cancellationHandler);\n      }\n      socket.removeListener(connectEvent, connectHandler);\n      callback(connectionFailureError(eventName, err));\n    };\n  }\n  function connectHandler() {\n    SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n    if (cancellationHandler && options.cancellationToken) {\n      options.cancellationToken.removeListener('cancel', cancellationHandler);\n    }\n    if ('authorizationError' in socket) {\n      if (socket.authorizationError && rejectUnauthorized) {\n        return callback(socket.authorizationError);\n      }\n    }\n    socket.setTimeout(socketTimeoutMS);\n    callback(undefined, socket);\n  }\n  SOCKET_ERROR_EVENTS.forEach(event => socket.once(event, errorHandler(event)));\n  if (options.cancellationToken) {\n    cancellationHandler = errorHandler('cancel');\n    options.cancellationToken.once('cancel', cancellationHandler);\n  }\n  if (existingSocket) {\n    process.nextTick(connectHandler);\n  } else {\n    socket.once(connectEvent, connectHandler);\n  }\n}\nfunction makeSocks5Connection(options, callback) {\n  const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '',\n  // proxyHost is guaranteed to set here\n  options.proxyPort ?? 1080);\n  // First, connect to the proxy server itself:\n  makeConnection({\n    ...options,\n    hostAddress,\n    tls: false,\n    proxyHost: undefined\n  }, (err, rawSocket) => {\n    if (err) {\n      return callback(err);\n    }\n    const destination = parseConnectOptions(options);\n    if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n      return callback(new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts'));\n    }\n    // Then, establish the Socks5 proxy connection:\n    socks_1.SocksClient.createConnection({\n      existing_socket: rawSocket,\n      timeout: options.connectTimeoutMS,\n      command: 'connect',\n      destination: {\n        host: destination.host,\n        port: destination.port\n      },\n      proxy: {\n        // host and port are ignored because we pass existing_socket\n        host: 'iLoveJavaScript',\n        port: 0,\n        type: 5,\n        userId: options.proxyUsername || undefined,\n        password: options.proxyPassword || undefined\n      }\n    }).then(_ref => {\n      let {\n        socket\n      } = _ref;\n      // Finally, now treat the resulting duplex stream as the\n      // socket over which we send and receive wire protocol messages:\n      makeConnection({\n        ...options,\n        existingSocket: socket,\n        proxyHost: undefined\n      }, callback);\n    }, error => callback(connectionFailureError('error', error)));\n  });\n}\nfunction connectionFailureError(type, err) {\n  switch (type) {\n    case 'error':\n      return new error_1.MongoNetworkError(err);\n    case 'timeout':\n      return new error_1.MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new error_1.MongoNetworkError('connection closed');\n    case 'cancel':\n      return new error_1.MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new error_1.MongoNetworkError('unknown network error');\n  }\n}","map":{"version":3,"names":["net","require","socks_1","tls","bson_1","constants_1","error_1","utils_1","auth_provider_1","gssapi_1","mongocr_1","mongodb_aws_1","plain_1","providers_1","scram_1","x509_1","connection_1","constants_2","AUTH_PROVIDERS","Map","AuthMechanism","MONGODB_AWS","MongoDBAWS","MONGODB_CR","MongoCR","MONGODB_GSSAPI","GSSAPI","MONGODB_PLAIN","Plain","MONGODB_SCRAM_SHA1","ScramSHA1","MONGODB_SCRAM_SHA256","ScramSHA256","MONGODB_X509","X509","connect","options","callback","makeConnection","existingSocket","undefined","err","socket","ConnectionType","connectionType","Connection","autoEncrypter","CryptoConnection","performInitialHandshake","exports","checkSupportedServer","hello","serverVersionHighEnough","maxWireVersion","Int32","MIN_SUPPORTED_WIRE_VERSION","serverVersionLowEnough","minWireVersion","MAX_SUPPORTED_WIRE_VERSION","message","hostAddress","JSON","stringify","MAX_SUPPORTED_SERVER_VERSION","MongoCompatibilityError","MIN_SUPPORTED_SERVER_VERSION","conn","_callback","ret","destroy","credentials","mechanism","MONGODB_DEFAULT","get","MongoInvalidArgumentError","authContext","AuthContext","prepareHandshakeDocument","handshakeDoc","handshakeOptions","Object","assign","connectTimeoutMS","socketTimeoutMS","start","Date","getTime","command","ns","response","ok","MongoServerError","isWritablePrimary","LEGACY_HELLO_COMMAND","helloOk","supportedServerErr","loadBalanced","serviceId","lastHelloMS","arbiterOnly","resolvedCredentials","resolveAuthMechanism","provider","auth","MongoError","addErrorLabel","MongoErrorLabel","HandshakeError","needsRetryableWriteLabel","RetryableWriteError","compressors","serverApi","connection","version","client","metadata","makeClientMetadata","compression","username","saslSupportedMechs","source","prepare","LEGAL_TLS_SOCKET_OPTIONS","LEGAL_TCP_SOCKET_OPTIONS","parseConnectOptions","result","name","socketPath","path","host","port","MongoRuntimeError","parseSslOptions","servername","isIP","SOCKET_ERROR_EVENT_LIST","SOCKET_ERROR_EVENTS","Set","useTLS","keepAlive","Reflect","noDelay","rejectUnauthorized","keepAliveInitialDelay","Math","round","proxyHost","makeSocks5Connection","tlsSocket","disableRenegotiation","createConnection","setKeepAlive","setTimeout","setNoDelay","connectEvent","cancellationHandler","errorHandler","eventName","forEach","event","removeAllListeners","cancellationToken","removeListener","connectHandler","connectionFailureError","authorizationError","once","process","nextTick","HostAddress","fromHostPort","proxyPort","rawSocket","destination","SocksClient","existing_socket","timeout","proxy","type","userId","proxyUsername","password","proxyPassword","then","_ref","error","MongoNetworkError","MongoNetworkTimeoutError"],"sources":["C:\\Users\\oria3\\node_modules\\mongodb\\src\\cmap\\connect.ts"],"sourcesContent":["import type { Socket, SocketConnectOpts } from 'net';\nimport * as net from 'net';\nimport { SocksClient } from 'socks';\nimport type { ConnectionOptions as TLSConnectionOpts, TLSSocket } from 'tls';\nimport * as tls from 'tls';\n\nimport type { Document } from '../bson';\nimport { Int32 } from '../bson';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoError,\n  MongoErrorLabel,\n  MongoInvalidArgumentError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoRuntimeError,\n  MongoServerError,\n  needsRetryableWriteLabel\n} from '../error';\nimport { Callback, ClientMetadata, HostAddress, makeClientMetadata, ns } from '../utils';\nimport { AuthContext, AuthProvider } from './auth/auth_provider';\nimport { GSSAPI } from './auth/gssapi';\nimport { MongoCR } from './auth/mongocr';\nimport { MongoDBAWS } from './auth/mongodb_aws';\nimport { Plain } from './auth/plain';\nimport { AuthMechanism } from './auth/providers';\nimport { ScramSHA1, ScramSHA256 } from './auth/scram';\nimport { X509 } from './auth/x509';\nimport { Connection, ConnectionOptions, CryptoConnection } from './connection';\nimport {\n  MAX_SUPPORTED_SERVER_VERSION,\n  MAX_SUPPORTED_WIRE_VERSION,\n  MIN_SUPPORTED_SERVER_VERSION,\n  MIN_SUPPORTED_WIRE_VERSION\n} from './wire_protocol/constants';\n\nconst AUTH_PROVIDERS = new Map<AuthMechanism | string, AuthProvider>([\n  [AuthMechanism.MONGODB_AWS, new MongoDBAWS()],\n  [AuthMechanism.MONGODB_CR, new MongoCR()],\n  [AuthMechanism.MONGODB_GSSAPI, new GSSAPI()],\n  [AuthMechanism.MONGODB_PLAIN, new Plain()],\n  [AuthMechanism.MONGODB_SCRAM_SHA1, new ScramSHA1()],\n  [AuthMechanism.MONGODB_SCRAM_SHA256, new ScramSHA256()],\n  [AuthMechanism.MONGODB_X509, new X509()]\n]);\n\n/** @public */\nexport type Stream = Socket | TLSSocket;\n\nexport function connect(options: ConnectionOptions, callback: Callback<Connection>): void {\n  makeConnection({ ...options, existingSocket: undefined }, (err, socket) => {\n    if (err || !socket) {\n      return callback(err);\n    }\n\n    let ConnectionType = options.connectionType ?? Connection;\n    if (options.autoEncrypter) {\n      ConnectionType = CryptoConnection;\n    }\n    performInitialHandshake(new ConnectionType(socket, options), options, callback);\n  });\n}\n\nfunction checkSupportedServer(hello: Document, options: ConnectionOptions) {\n  const serverVersionHighEnough =\n    hello &&\n    (typeof hello.maxWireVersion === 'number' || hello.maxWireVersion instanceof Int32) &&\n    hello.maxWireVersion >= MIN_SUPPORTED_WIRE_VERSION;\n  const serverVersionLowEnough =\n    hello &&\n    (typeof hello.minWireVersion === 'number' || hello.minWireVersion instanceof Int32) &&\n    hello.minWireVersion <= MAX_SUPPORTED_WIRE_VERSION;\n\n  if (serverVersionHighEnough) {\n    if (serverVersionLowEnough) {\n      return null;\n    }\n\n    const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(\n      hello.minWireVersion\n    )}, but this version of the Node.js Driver requires at most ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n    return new MongoCompatibilityError(message);\n  }\n\n  const message = `Server at ${options.hostAddress} reports maximum wire version ${\n    JSON.stringify(hello.maxWireVersion) ?? 0\n  }, but this version of the Node.js Driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION})`;\n  return new MongoCompatibilityError(message);\n}\n\nfunction performInitialHandshake(\n  conn: Connection,\n  options: ConnectionOptions,\n  _callback: Callback\n) {\n  const callback: Callback<Document> = function (err, ret) {\n    if (err && conn) {\n      conn.destroy();\n    }\n    _callback(err, ret);\n  };\n\n  const credentials = options.credentials;\n  if (credentials) {\n    if (\n      !(credentials.mechanism === AuthMechanism.MONGODB_DEFAULT) &&\n      !AUTH_PROVIDERS.get(credentials.mechanism)\n    ) {\n      callback(\n        new MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`)\n      );\n      return;\n    }\n  }\n\n  const authContext = new AuthContext(conn, credentials, options);\n  prepareHandshakeDocument(authContext, (err, handshakeDoc) => {\n    if (err || !handshakeDoc) {\n      return callback(err);\n    }\n\n    const handshakeOptions: Document = Object.assign({}, options);\n    if (typeof options.connectTimeoutMS === 'number') {\n      // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n      handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n\n    const start = new Date().getTime();\n    conn.command(ns('admin.$cmd'), handshakeDoc, handshakeOptions, (err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (response?.ok === 0) {\n        callback(new MongoServerError(response));\n        return;\n      }\n\n      if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[LEGACY_HELLO_COMMAND];\n      }\n\n      if (response.helloOk) {\n        conn.helloOk = true;\n      }\n\n      const supportedServerErr = checkSupportedServer(response, options);\n      if (supportedServerErr) {\n        callback(supportedServerErr);\n        return;\n      }\n\n      if (options.loadBalanced) {\n        if (!response.serviceId) {\n          return callback(\n            new MongoCompatibilityError(\n              'Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.'\n            )\n          );\n        }\n      }\n\n      // NOTE: This is metadata attached to the connection while porting away from\n      //       handshake being done in the `Server` class. Likely, it should be\n      //       relocated, or at very least restructured.\n      conn.hello = response;\n      conn.lastHelloMS = new Date().getTime() - start;\n\n      if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n          return callback(\n            new MongoInvalidArgumentError(\n              `No AuthProvider for ${resolvedCredentials.mechanism} defined.`\n            )\n          );\n        }\n        provider.auth(authContext, err => {\n          if (err) {\n            if (err instanceof MongoError) {\n              err.addErrorLabel(MongoErrorLabel.HandshakeError);\n              if (needsRetryableWriteLabel(err, response.maxWireVersion)) {\n                err.addErrorLabel(MongoErrorLabel.RetryableWriteError);\n              }\n            }\n            return callback(err);\n          }\n          callback(undefined, conn);\n        });\n\n        return;\n      }\n\n      callback(undefined, conn);\n    });\n  });\n}\n\nexport interface HandshakeDocument extends Document {\n  /**\n   * @deprecated Use hello instead\n   */\n  ismaster?: boolean;\n  hello?: boolean;\n  helloOk?: boolean;\n  client: ClientMetadata;\n  compression: string[];\n  saslSupportedMechs?: string;\n  loadBalanced?: boolean;\n}\n\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nexport function prepareHandshakeDocument(\n  authContext: AuthContext,\n  callback: Callback<HandshakeDocument>\n) {\n  const options = authContext.options;\n  const compressors = options.compressors ? options.compressors : [];\n  const { serverApi } = authContext.connection;\n\n  const handshakeDoc: HandshakeDocument = {\n    [serverApi?.version ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n    helloOk: true,\n    client: options.metadata || makeClientMetadata(options),\n    compression: compressors\n  };\n\n  if (options.loadBalanced === true) {\n    handshakeDoc.loadBalanced = true;\n  }\n\n  const credentials = authContext.credentials;\n  if (credentials) {\n    if (credentials.mechanism === AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n      handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n\n      const provider = AUTH_PROVIDERS.get(AuthMechanism.MONGODB_SCRAM_SHA256);\n      if (!provider) {\n        // This auth mechanism is always present.\n        return callback(\n          new MongoInvalidArgumentError(\n            `No AuthProvider for ${AuthMechanism.MONGODB_SCRAM_SHA256} defined.`\n          )\n        );\n      }\n      return provider.prepare(handshakeDoc, authContext, callback);\n    }\n    const provider = AUTH_PROVIDERS.get(credentials.mechanism);\n    if (!provider) {\n      return callback(\n        new MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`)\n      );\n    }\n    return provider.prepare(handshakeDoc, authContext, callback);\n  }\n  callback(undefined, handshakeDoc);\n}\n\n/** @public */\nexport const LEGAL_TLS_SOCKET_OPTIONS = [\n  'ALPNProtocols',\n  'ca',\n  'cert',\n  'checkServerIdentity',\n  'ciphers',\n  'crl',\n  'ecdhCurve',\n  'key',\n  'minDHSize',\n  'passphrase',\n  'pfx',\n  'rejectUnauthorized',\n  'secureContext',\n  'secureProtocol',\n  'servername',\n  'session'\n] as const;\n\n/** @public */\nexport const LEGAL_TCP_SOCKET_OPTIONS = [\n  'family',\n  'hints',\n  'localAddress',\n  'localPort',\n  'lookup'\n] as const;\n\nfunction parseConnectOptions(options: ConnectionOptions): SocketConnectOpts {\n  const hostAddress = options.hostAddress;\n  if (!hostAddress) throw new MongoInvalidArgumentError('Option \"hostAddress\" is required');\n\n  const result: Partial<net.TcpNetConnectOpts & net.IpcNetConnectOpts> = {};\n  for (const name of LEGAL_TCP_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (typeof hostAddress.socketPath === 'string') {\n    result.path = hostAddress.socketPath;\n    return result as net.IpcNetConnectOpts;\n  } else if (typeof hostAddress.host === 'string') {\n    result.host = hostAddress.host;\n    result.port = hostAddress.port;\n    return result as net.TcpNetConnectOpts;\n  } else {\n    // This should never happen since we set up HostAddresses\n    // But if we don't throw here the socket could hang until timeout\n    // TODO(NODE-3483)\n    throw new MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n  }\n}\n\ntype MakeConnectionOptions = ConnectionOptions & { existingSocket?: Stream };\n\nfunction parseSslOptions(options: MakeConnectionOptions): TLSConnectionOpts {\n  const result: TLSConnectionOpts = parseConnectOptions(options);\n  // Merge in valid SSL options\n  for (const name of LEGAL_TLS_SOCKET_OPTIONS) {\n    if (options[name] != null) {\n      (result as Document)[name] = options[name];\n    }\n  }\n\n  if (options.existingSocket) {\n    result.socket = options.existingSocket;\n  }\n\n  // Set default sni servername to be the same as host\n  if (result.servername == null && result.host && !net.isIP(result.host)) {\n    result.servername = result.host;\n  }\n\n  return result;\n}\n\nconst SOCKET_ERROR_EVENT_LIST = ['error', 'close', 'timeout', 'parseError'] as const;\ntype ErrorHandlerEventName = typeof SOCKET_ERROR_EVENT_LIST[number] | 'cancel';\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\n\nfunction makeConnection(options: MakeConnectionOptions, _callback: Callback<Stream>) {\n  const useTLS = options.tls ?? false;\n  const keepAlive = options.keepAlive ?? true;\n  const socketTimeoutMS = options.socketTimeoutMS ?? Reflect.get(options, 'socketTimeout') ?? 0;\n  const noDelay = options.noDelay ?? true;\n  const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n  const rejectUnauthorized = options.rejectUnauthorized ?? true;\n  const keepAliveInitialDelay =\n    ((options.keepAliveInitialDelay ?? 120000) > socketTimeoutMS\n      ? Math.round(socketTimeoutMS / 2)\n      : options.keepAliveInitialDelay) ?? 120000;\n  const existingSocket = options.existingSocket;\n\n  let socket: Stream;\n  const callback: Callback<Stream> = function (err, ret) {\n    if (err && socket) {\n      socket.destroy();\n    }\n\n    _callback(err, ret);\n  };\n\n  if (options.proxyHost != null) {\n    // Currently, only Socks5 is supported.\n    return makeSocks5Connection(\n      {\n        ...options,\n        connectTimeoutMS // Should always be present for Socks5\n      },\n      callback\n    );\n  }\n\n  if (useTLS) {\n    const tlsSocket = tls.connect(parseSslOptions(options));\n    if (typeof tlsSocket.disableRenegotiation === 'function') {\n      tlsSocket.disableRenegotiation();\n    }\n    socket = tlsSocket;\n  } else if (existingSocket) {\n    // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n    // so we only need to handle the non-TLS case here (where existingSocket\n    // gives us all we need out of the box).\n    socket = existingSocket;\n  } else {\n    socket = net.createConnection(parseConnectOptions(options));\n  }\n\n  socket.setKeepAlive(keepAlive, keepAliveInitialDelay);\n  socket.setTimeout(connectTimeoutMS);\n  socket.setNoDelay(noDelay);\n\n  const connectEvent = useTLS ? 'secureConnect' : 'connect';\n  let cancellationHandler: (err: Error) => void;\n  function errorHandler(eventName: ErrorHandlerEventName) {\n    return (err: Error) => {\n      SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n      if (cancellationHandler && options.cancellationToken) {\n        options.cancellationToken.removeListener('cancel', cancellationHandler);\n      }\n\n      socket.removeListener(connectEvent, connectHandler);\n      callback(connectionFailureError(eventName, err));\n    };\n  }\n\n  function connectHandler() {\n    SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n    if (cancellationHandler && options.cancellationToken) {\n      options.cancellationToken.removeListener('cancel', cancellationHandler);\n    }\n\n    if ('authorizationError' in socket) {\n      if (socket.authorizationError && rejectUnauthorized) {\n        return callback(socket.authorizationError);\n      }\n    }\n\n    socket.setTimeout(socketTimeoutMS);\n    callback(undefined, socket);\n  }\n\n  SOCKET_ERROR_EVENTS.forEach(event => socket.once(event, errorHandler(event)));\n  if (options.cancellationToken) {\n    cancellationHandler = errorHandler('cancel');\n    options.cancellationToken.once('cancel', cancellationHandler);\n  }\n\n  if (existingSocket) {\n    process.nextTick(connectHandler);\n  } else {\n    socket.once(connectEvent, connectHandler);\n  }\n}\n\nfunction makeSocks5Connection(options: MakeConnectionOptions, callback: Callback<Stream>) {\n  const hostAddress = HostAddress.fromHostPort(\n    options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080\n  );\n\n  // First, connect to the proxy server itself:\n  makeConnection(\n    {\n      ...options,\n      hostAddress,\n      tls: false,\n      proxyHost: undefined\n    },\n    (err, rawSocket) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const destination = parseConnectOptions(options) as net.TcpNetConnectOpts;\n      if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n        return callback(\n          new MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts')\n        );\n      }\n\n      // Then, establish the Socks5 proxy connection:\n      SocksClient.createConnection({\n        existing_socket: rawSocket,\n        timeout: options.connectTimeoutMS,\n        command: 'connect',\n        destination: {\n          host: destination.host,\n          port: destination.port\n        },\n        proxy: {\n          // host and port are ignored because we pass existing_socket\n          host: 'iLoveJavaScript',\n          port: 0,\n          type: 5,\n          userId: options.proxyUsername || undefined,\n          password: options.proxyPassword || undefined\n        }\n      }).then(\n        ({ socket }) => {\n          // Finally, now treat the resulting duplex stream as the\n          // socket over which we send and receive wire protocol messages:\n          makeConnection(\n            {\n              ...options,\n              existingSocket: socket,\n              proxyHost: undefined\n            },\n            callback\n          );\n        },\n        error => callback(connectionFailureError('error', error))\n      );\n    }\n  );\n}\n\nfunction connectionFailureError(type: ErrorHandlerEventName, err: Error) {\n  switch (type) {\n    case 'error':\n      return new MongoNetworkError(err);\n    case 'timeout':\n      return new MongoNetworkTimeoutError('connection timed out');\n    case 'close':\n      return new MongoNetworkError('connection closed');\n    case 'cancel':\n      return new MongoNetworkError('connection establishment was cancelled');\n    default:\n      return new MongoNetworkError('unknown network error');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}