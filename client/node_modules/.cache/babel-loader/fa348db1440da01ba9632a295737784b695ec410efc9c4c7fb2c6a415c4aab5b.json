{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.getMongoDBClientEncryption = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeClientMetadata = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsyncSeries = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.databaseNamespace = exports.maybeCallback = exports.makeCounter = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyWriteConcern = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.checkCollectionName = exports.ByteUtils = void 0;\nconst crypto = require(\"crypto\");\nconst os = require(\"os\");\nconst url_1 = require(\"url\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n  toLocalBufferType(buffer) {\n    return Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n  equals(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n  compare(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n  toBase64(uint8array) {\n    return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nfunction checkCollectionName(collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw new error_1.MongoInvalidArgumentError('Collection name must be a String');\n  }\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n  if (collectionName.indexOf('$') !== -1 && collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  }\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\nexports.checkCollectionName = checkCollectionName;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n  return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = object => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n  return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n  return {\n    ...target,\n    ...source\n  };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n  // Filtered options\n  return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n  return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\nfunction applyWriteConcern(target, sources, options) {\n  options = options ?? {};\n  const db = sources.db;\n  const coll = sources.collection;\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n    return target;\n  }\n  const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, {\n      writeConcern\n    });\n  }\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, coll.writeConcern)\n    });\n  }\n  if (db && db.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, db.writeConcern)\n    });\n  }\n  return target;\n}\nexports.applyWriteConcern = applyWriteConcern;\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n  return !!value && typeof value.then === 'function';\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n  if (command.explain) {\n    return command;\n  }\n  return {\n    explain: command,\n    verbosity: explain.verbosity\n  };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('s' in provider && 'client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('s' in provider && 'db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection === '' ? undefined : collection;\n  }\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n  withCollection(collection) {\n    return new MongoDBNamespace(this.db, collection);\n  }\n  static fromString(namespace) {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/** @internal */\nfunction makeCounter() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function* () {\n    let count = seed;\n    while (true) {\n      const newCount = count;\n      count += 1;\n      yield newCount;\n    }\n  }();\n}\nexports.makeCounter = makeCounter;\nfunction maybeCallback(promiseFn, callback) {\n  const promise = promiseFn();\n  if (callback == null) {\n    return promise;\n  }\n  promise.then(result => callback(undefined, result), error => callback(error));\n  return;\n}\nexports.maybeCallback = maybeCallback;\n/** @internal */\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\nexports.databaseNamespace = databaseNamespace;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n  return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n  function eachCallback(err) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction eachAsyncSeries(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = arr.length;\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n  function eachCallback(err) {\n    idx++;\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n    eachFn(arr[idx], eachCallback);\n  }\n  eachFn(arr[idx], eachCallback);\n}\nexports.eachAsyncSeries = eachAsyncSeries;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n  return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n    }\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\nexports.makeStateMachine = makeStateMachine;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../package.json').version;\nfunction makeClientMetadata(options) {\n  options = options ?? {};\n  const metadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  };\n  // support optionally provided wrapping driver info\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n  return metadata;\n}\nexports.makeClientMetadata = makeClientMetadata;\n/** @internal */\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n  const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n  return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value) {\n  let requiredKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (!isObject(value)) {\n    return false;\n  }\n  const ctor = value.constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n  return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item));\n  } else if (isRecord(value)) {\n    const res = {};\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n  const ctor = value.constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value);\n      case 'set':\n        return new Set(value);\n      case 'buffer':\n        return Buffer.from(value);\n    }\n  }\n  return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n  get length() {\n    return this.count;\n  }\n  get [Symbol.toStringTag]() {\n    return 'List';\n  }\n  constructor() {\n    this.count = 0;\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    };\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  toArray() {\n    return Array.from(this);\n  }\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n  *[Symbol.iterator]() {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n  *nodes() {\n    let ptr = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const {\n        next\n      } = ptr;\n      yield ptr;\n      ptr = next;\n    }\n  }\n  /** Insert at end of list */\n  push(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head,\n      prev: this.head.prev,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n  /** Insert at front of list */\n  unshift(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head.next,\n      prev: this.head,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n  remove(node) {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n    this.count -= 1;\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n    return node.value;\n  }\n  /** Removes the first node at the front of the list */\n  shift() {\n    return this.remove(this.head.next);\n  }\n  /** Removes the last node at the end of the list */\n  pop() {\n    return this.remove(this.head.prev);\n  }\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n  clear() {\n    this.count = 0;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  /** Returns the first item in the list, does not remove */\n  first() {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n  /** Returns the last item in the list, does not remove */\n  last() {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n  get length() {\n    return this.totalByteLength;\n  }\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer) {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32() {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n    return value;\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size) {\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n    for (let bytesRead = 0; bytesRead < size;) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n      result.set(bytes, bytesRead);\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n    return result;\n  }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n  constructor(hostString) {\n    this.host = undefined;\n    this.port = undefined;\n    this.socketPath = undefined;\n    this.isIPv6 = false;\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new url_1.URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n    const hostname = url.hostname;\n    const port = url.port;\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n    this.host = normalized.toLowerCase();\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n    if (this.port === 0) {\n      throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new HostAddress('${this.toString()}')`;\n  }\n  toString() {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n  static fromSrvRecord(_ref) {\n    let {\n      name,\n      port\n    } = _ref;\n    return HostAddress.fromHostPort(name, port);\n  }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n  if (!server) {\n    return false;\n  }\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== common_1.ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n  return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n  return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n  let mongodbClientEncryption = null;\n  // NOTE(NODE-4254): This is to get around the circular dependency between\n  // mongodb-client-encryption and the driver in the test scenarios.\n  if (typeof process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE === 'string' && process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE.length > 0) {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require(process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE);\n    } catch {\n      // ignore\n    }\n  } else {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch {\n      // ignore\n    }\n  }\n  return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n  if (oid1 == null) {\n    return -1;\n  }\n  if (oid2 == null) {\n    return 1;\n  }\n  return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n  const parsedInt = parseInteger(value);\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;","map":{"version":3,"names":["crypto","require","os","url_1","bson_1","constants_1","constants_2","error_1","read_concern_1","read_preference_1","common_1","write_concern_1","exports","ByteUtils","toLocalBufferType","buffer","Buffer","isBuffer","from","byteOffset","byteLength","equals","seqA","seqB","compare","toBase64","uint8array","toString","checkCollectionName","collectionName","MongoInvalidArgumentError","indexOf","match","normalizeHintField","hint","finalHint","undefined","Array","isArray","forEach","param","name","TO_STRING","object","Object","prototype","call","isObject","arg","mergeOptions","target","source","filterOptions","options","names","includes","applyRetryableWrites","db","s","retryWrites","applyWriteConcern","sources","coll","collection","session","inTransaction","writeConcern","WriteConcern","fromOptions","assign","isPromiseLike","value","then","decorateWithCollation","command","capabilities","getTopology","collation","commandsTakeCollation","MongoCompatibilityError","decorateWithReadConcern","readConcern","keys","length","decorateWithExplain","explain","verbosity","provider","topology","client","MongoNotConnectedError","ns","MongoDBNamespace","fromString","constructor","withCollection","namespace","MongoRuntimeError","collectionParts","split","join","makeCounter","seed","arguments","count","newCount","maybeCallback","promiseFn","callback","promise","result","error","databaseNamespace","uuidV4","randomBytes","maxWireVersion","topologyOrServer","loadBalanced","MAX_SUPPORTED_WIRE_VERSION","hello","lastHello","description","eachAsync","arr","eachFn","idx","awaiting","eachCallback","err","eachAsyncSeries","arrayStrictEqual","arr2","every","elt","errorStrictEqual","lhs","rhs","message","makeStateMachine","stateTable","stateTransition","newState","legalStates","state","emit","NODE_DRIVER_VERSION","version","makeClientMetadata","metadata","driver","type","process","platform","architecture","arch","release","endianness","driverInfo","appName","application","slice","now","hrtime","Math","floor","calculateDurationInMs","started","elapsed","hasAtomicOperators","doc","document","resolveOptions","parent","resolveBSONOptions","ReadConcern","readPreference","ReadPreference","isSuperset","set","subset","Set","elem","has","isHello","LEGACY_HELLO_COMMAND","setDifference","setA","setB","difference","delete","HAS_OWN","prop","hasOwnProperty","isRecord","requiredKeys","ctor","deepCopy","map","item","res","key","toLowerCase","Number","Map","List","Symbol","toStringTag","head","next","prev","toArray","iterator","node","nodes","ptr","push","newNode","pushMany","iterable","unshift","remove","prevNode","nextNode","shift","pop","prune","filter","clear","first","last","BufferPool","buffers","totalByteLength","append","getInt32","firstBuffer","readInt32LE","top4Bytes","read","size","alloc","allocUnsafe","bytesRead","bytesRemaining","bytesReadable","min","bytes","subarray","HostAddress","hostString","host","port","socketPath","isIPv6","escapedHost","endsWith","decodeURIComponent","urlString","url","URL","urlError","runtimeError","cause","hostname","normalized","startsWith","substring","parseInt","MongoParseError","freeze","for","inspect","fromHostPort","fromSrvRecord","_ref","DEFAULT_PK_FACTORY","createPk","ObjectId","MONGODB_WARNING_CODE","emitWarning","code","emittedWarnings","emitWarningOnce","add","enumToString","en","values","supportsRetryableWrites","server","logicalSessionTimeoutMinutes","ServerType","Standalone","shuffle","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","commandSupportsReadConcern","aggregate","distinct","find","geoNear","mapReduce","out","inline","getMongoDBClientEncryption","mongodbClientEncryption","env","MONGODB_CLIENT_ENCRYPTION_OVERRIDE","compareObjectId","oid1","oid2","id","parseInteger","trunc","parsedValue","String","isNaN","parseUnsignedInteger","parsedInt"],"sources":["C:\\Users\\oria3\\node_modules\\mongodb\\src\\utils.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport type { SrvRecord } from 'dns';\nimport * as os from 'os';\nimport { URL } from 'url';\n\nimport { Document, ObjectId, resolveBSONOptions } from './bson';\nimport type { Connection } from './cmap/connection';\nimport { MAX_SUPPORTED_WIRE_VERSION } from './cmap/wire_protocol/constants';\nimport type { Collection } from './collection';\nimport { LEGACY_HELLO_COMMAND } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport type { FindCursor } from './cursor/find_cursor';\nimport type { Db } from './db';\nimport {\n  AnyError,\n  MongoCompatibilityError,\n  MongoInvalidArgumentError,\n  MongoNotConnectedError,\n  MongoParseError,\n  MongoRuntimeError\n} from './error';\nimport type { Explain } from './explain';\nimport type { MongoClient } from './mongo_client';\nimport type { CommandOperationOptions, OperationParent } from './operations/command';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { ServerType } from './sdam/common';\nimport type { Server } from './sdam/server';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport { W, WriteConcern, WriteConcernOptions } from './write_concern';\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport type Callback<T = any> = (error?: AnyError, result?: T) => void;\n\nexport type AnyOptions = Document;\n\nexport const ByteUtils = {\n  toLocalBufferType(this: void, buffer: Buffer | Uint8Array): Buffer {\n    return Buffer.isBuffer(buffer)\n      ? buffer\n      : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n\n  equals(this: void, seqA: Uint8Array, seqB: Uint8Array) {\n    return ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n\n  compare(this: void, seqA: Uint8Array, seqB: Uint8Array) {\n    return ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n\n  toBase64(this: void, uint8array: Uint8Array) {\n    return ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nexport function checkCollectionName(collectionName: string): void {\n  if ('string' !== typeof collectionName) {\n    throw new MongoInvalidArgumentError('Collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n\n  if (\n    collectionName.indexOf('$') !== -1 &&\n    collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null\n  ) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  }\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\n\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nexport function normalizeHintField(hint?: Hint): Hint | undefined {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {} as Document;\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\nconst TO_STRING = (object: unknown) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n\nexport function isObject(arg: unknown): arg is object {\n  return '[object Object]' === TO_STRING(arg);\n}\n\n/** @internal */\nexport function mergeOptions<T, S>(target: T, source: S): T & S {\n  return { ...target, ...source };\n}\n\n/** @internal */\nexport function filterOptions(options: AnyOptions, names: ReadonlyArray<string>): AnyOptions {\n  const filterOptions: AnyOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n\n  // Filtered options\n  return filterOptions;\n}\n\ninterface HasRetryableWrites {\n  retryWrites?: boolean;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nexport function applyRetryableWrites<T extends HasRetryableWrites>(target: T, db?: Db): T {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\ninterface HasWriteConcern {\n  writeConcern?: WriteConcernOptions | WriteConcern | W;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\nexport function applyWriteConcern<T extends HasWriteConcern>(\n  target: T,\n  sources: { db?: Db; collection?: Collection },\n  options?: OperationOptions & WriteConcernOptions\n): T {\n  options = options ?? {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, { writeConcern });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, coll.writeConcern) });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, db.writeConcern) });\n  }\n\n  return target;\n}\n\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nexport function isPromiseLike<T = any>(value?: PromiseLike<T> | void): value is Promise<T> {\n  return !!value && typeof value.then === 'function';\n}\n\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nexport function decorateWithCollation(\n  command: Document,\n  target: MongoClient | Db | Collection,\n  options: AnyOptions\n): void {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nexport function decorateWithReadConcern(\n  command: Document,\n  coll: { s: { readConcern?: ReadConcern } },\n  options?: OperationOptions\n): void {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(command: Document, explain: Explain): Document {\n  if (command.explain) {\n    return command;\n  }\n\n  return { explain: command, verbosity: explain.verbosity };\n}\n\n/**\n * @internal\n */\nexport type TopologyProvider =\n  | MongoClient\n  | ClientSession\n  | FindCursor\n  | AbstractCursor\n  | Collection<any>\n  | Db;\n\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nexport function getTopology(provider: TopologyProvider): Topology {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('s' in provider && 'client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('s' in provider && 'db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n\n  throw new MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\n/** @internal */\nexport function ns(ns: string): MongoDBNamespace {\n  return MongoDBNamespace.fromString(ns);\n}\n\n/** @public */\nexport class MongoDBNamespace {\n  db: string;\n  collection: string | undefined;\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db: string, collection?: string) {\n    this.db = db;\n    this.collection = collection === '' ? undefined : collection;\n  }\n\n  toString(): string {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection: string): MongoDBNamespace {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace?: string): MongoDBNamespace {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\n\n/** @internal */\nexport function* makeCounter(seed = 0): Generator<number> {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\n/**\n * Helper for handling legacy callback support.\n */\nexport function maybeCallback<T>(promiseFn: () => Promise<T>, callback: null): Promise<T>;\nexport function maybeCallback<T>(\n  promiseFn: () => Promise<T>,\n  callback?: Callback<T>\n): Promise<T> | void;\nexport function maybeCallback<T>(\n  promiseFn: () => Promise<T>,\n  callback?: Callback<T> | null\n): Promise<T> | void {\n  const promise = promiseFn();\n  if (callback == null) {\n    return promise;\n  }\n\n  promise.then(\n    result => callback(undefined, result),\n    error => callback(error)\n  );\n  return;\n}\n\n/** @internal */\nexport function databaseNamespace(ns: string): string {\n  return ns.split('.')[0];\n}\n\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nexport function uuidV4(): Buffer {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nexport function maxWireVersion(topologyOrServer?: Connection | Topology | Server): number {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      return MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (\n      topologyOrServer.description &&\n      'maxWireVersion' in topologyOrServer.description &&\n      topologyOrServer.description.maxWireVersion != null\n    ) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nexport function eachAsync<T = Document>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\n/** @internal */\nexport function eachAsyncSeries<T = any>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = arr.length;\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    idx++;\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n\n    eachFn(arr[idx], eachCallback);\n  }\n\n  eachFn(arr[idx], eachCallback);\n}\n\n/** @internal */\nexport function arrayStrictEqual(arr: unknown[], arr2: unknown[]): boolean {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\n/** @internal */\nexport function errorStrictEqual(lhs?: AnyError | null, rhs?: AnyError | null): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\ninterface StateTable {\n  [key: string]: string[];\n}\ninterface ObjectWithState {\n  s: { state: string };\n  emit(event: 'stateChanged', state: string, newState: string): void;\n}\ninterface StateTransitionFunction {\n  (target: ObjectWithState, newState: string): void;\n}\n\n/** @public */\nexport type EventEmitterWithState = {\n  /** @internal */\n  stateChanged(previous: string, current: string): void;\n};\n\n/** @internal */\nexport function makeStateMachine(stateTable: StateTable): StateTransitionFunction {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new MongoRuntimeError(\n        `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`\n      );\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\n/** @public */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name: NodeJS.Platform;\n    architecture: string;\n    version: string;\n  };\n  platform: string;\n  version?: string;\n  application?: {\n    name: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../package.json').version;\n\nexport function makeClientMetadata(options?: ClientMetadataOptions): ClientMetadata {\n  options = options ?? {};\n\n  const metadata: ClientMetadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  };\n\n  // support optionally provided wrapping driver info\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n\n  return metadata;\n}\n\n/** @internal */\nexport function now(): number {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\n/** @internal */\nexport function calculateDurationInMs(started: number): number {\n  if (typeof started !== 'number') {\n    throw new MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\n/** @internal */\nexport function hasAtomicOperators(doc: Document | Document[]): boolean {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nexport function resolveOptions<T extends CommandOperationOptions>(\n  parent: OperationParent | undefined,\n  options?: T\n): T {\n  const result: T = Object.assign({}, options, resolveBSONOptions(options, parent));\n\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexport function isSuperset(set: Set<any> | any[], subset: Set<any> | any[]): boolean {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nexport function isHello(doc: Document): boolean {\n  return doc[LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\n/** Returns the items that are uniquely in setA */\nexport function setDifference<T>(setA: Iterable<T>, setB: Iterable<T>): Set<T> {\n  const difference = new Set<T>(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\n\nconst HAS_OWN = (object: unknown, prop: string) =>\n  Object.prototype.hasOwnProperty.call(object, prop);\n\nexport function isRecord<T extends readonly string[]>(\n  value: unknown,\n  requiredKeys: T\n): value is Record<T[number], any>;\nexport function isRecord(value: unknown): value is Record<string, any>;\nexport function isRecord(\n  value: unknown,\n  requiredKeys: string[] | undefined = undefined\n): value is Record<string, any> {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value as Record<string, any>);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nexport function deepCopy<T>(value: T): T {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item)) as unknown as T;\n  } else if (isRecord(value)) {\n    const res = {} as any;\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value as any) as unknown as T;\n      case 'set':\n        return new Set(value as any) as unknown as T;\n      case 'buffer':\n        return Buffer.from(value as unknown as Buffer) as unknown as T;\n    }\n  }\n\n  return value;\n}\n\ntype ListNode<T> = {\n  value: T;\n  next: ListNode<T> | HeadNode<T>;\n  prev: ListNode<T> | HeadNode<T>;\n};\n\ntype HeadNode<T> = {\n  value: null;\n  next: ListNode<T>;\n  prev: ListNode<T>;\n};\n\n/**\n * When a list is empty the head is a reference with pointers to itself\n * So this type represents that self referential state\n */\ntype EmptyNode = {\n  value: null;\n  next: EmptyNode;\n  prev: EmptyNode;\n};\n\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nexport class List<T = unknown> {\n  private readonly head: HeadNode<T> | EmptyNode;\n  private count: number;\n\n  get length() {\n    return this.count;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'List' as const;\n  }\n\n  constructor() {\n    this.count = 0;\n\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    } as unknown as EmptyNode;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n\n  *[Symbol.iterator](): Generator<T, void, void> {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n\n  private *nodes(): Generator<ListNode<T>, void, void> {\n    let ptr: HeadNode<T> | ListNode<T> | EmptyNode = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const { next } = ptr as ListNode<T>;\n      yield ptr as ListNode<T>;\n      ptr = next;\n    }\n  }\n\n  /** Insert at end of list */\n  push(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head as HeadNode<T>,\n      prev: this.head.prev as ListNode<T>,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable: Iterable<T>) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n\n  /** Insert at front of list */\n  unshift(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head.next as ListNode<T>,\n      prev: this.head as HeadNode<T>,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n\n  private remove(node: ListNode<T> | EmptyNode): T | null {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n\n    this.count -= 1;\n\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n\n    return node.value;\n  }\n\n  /** Removes the first node at the front of the list */\n  shift(): T | null {\n    return this.remove(this.head.next);\n  }\n\n  /** Removes the last node at the end of the list */\n  pop(): T | null {\n    return this.remove(this.head.prev);\n  }\n\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter: (value: T) => boolean) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n\n  clear() {\n    this.count = 0;\n    this.head.next = this.head as EmptyNode;\n    this.head.prev = this.head as EmptyNode;\n  }\n\n  /** Returns the first item in the list, does not remove */\n  first(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n\n  /** Returns the last item in the list, does not remove */\n  last(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\n\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nexport class BufferPool {\n  private buffers: List<Buffer>;\n  private totalByteLength: number;\n\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n\n  get length(): number {\n    return this.totalByteLength;\n  }\n\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer: Buffer): void {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32(): number | null {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n\n    return value;\n  }\n\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size: number): Buffer {\n    if (typeof size !== 'number' || size < 0) {\n      throw new MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n\n    for (let bytesRead = 0; bytesRead < size; ) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n\n      result.set(bytes, bytesRead);\n\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n\n    return result;\n  }\n}\n\n/** @public */\nexport class HostAddress {\n  host: string | undefined = undefined;\n  port: number | undefined = undefined;\n  socketPath: string | undefined = undefined;\n  isIPv6 = false;\n\n  constructor(hostString: string) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n\n    const hostname = url.hostname;\n    const port = url.port;\n\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n\n    this.host = normalized.toLowerCase();\n\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n\n    if (this.port === 0) {\n      throw new MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new HostAddress('${this.toString()}')`;\n  }\n\n  toString(): string {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n\n  static fromString(this: void, s: string): HostAddress {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host: string, port: number): HostAddress {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord({ name, port }: SrvRecord): HostAddress {\n    return HostAddress.fromHostPort(name, port);\n  }\n}\n\nexport const DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk(): ObjectId {\n    return new ObjectId();\n  }\n};\n\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexport const MONGODB_WARNING_CODE = 'MONGODB DRIVER' as const;\n\n/** @internal */\nexport function emitWarning(message: string): void {\n  return process.emitWarning(message, { code: MONGODB_WARNING_CODE } as any);\n}\n\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nexport function emitWarningOnce(message: string): void {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nexport function enumToString(en: Record<string, unknown>): string {\n  return Object.values(en).join(', ');\n}\n\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nexport function supportsRetryableWrites(server?: Server): boolean {\n  if (!server) {\n    return false;\n  }\n\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nexport function shuffle<T>(sequence: Iterable<T>, limit = 0): Array<T> {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nexport function commandSupportsReadConcern(command: Document, options?: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (\n    command.mapReduce &&\n    options &&\n    options.out &&\n    (options.out.inline === 1 || options.out === 'inline')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nexport function getMongoDBClientEncryption(): {\n  extension: (mdb: unknown) => {\n    AutoEncrypter: any;\n    ClientEncryption: any;\n  };\n} | null {\n  let mongodbClientEncryption = null;\n\n  // NOTE(NODE-4254): This is to get around the circular dependency between\n  // mongodb-client-encryption and the driver in the test scenarios.\n  if (\n    typeof process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE === 'string' &&\n    process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE.length > 0\n  ) {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require(process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE);\n    } catch {\n      // ignore\n    }\n  } else {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch {\n      // ignore\n    }\n  }\n\n  return mongodbClientEncryption;\n}\n\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nexport function compareObjectId(oid1?: ObjectId | null, oid2?: ObjectId | null): 0 | 1 | -1 {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n\n  if (oid1 == null) {\n    return -1;\n  }\n\n  if (oid2 == null) {\n    return 1;\n  }\n\n  return ByteUtils.compare(oid1.id, oid2.id);\n}\n\nexport function parseInteger(value: unknown): number | null {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\n\nexport function parseUnsignedInteger(value: unknown): number | null {\n  const parsedInt = parseInteger(value);\n\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}