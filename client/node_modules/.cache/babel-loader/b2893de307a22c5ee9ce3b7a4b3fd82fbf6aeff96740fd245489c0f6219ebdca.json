{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SeverityLevel = void 0;\nconst stream_1 = require(\"stream\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively.\n *\n * @returns the Writable stream to write logs to\n */\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n  const isValidLogDestinationString = destination => ['stdout', 'stderr'].includes(destination.toLowerCase());\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n  // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof stream_1.Writable) {\n    return mongodbLogPath;\n  }\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n  return process.stderr;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  emergency(component, message) {}\n  alert(component, message) {}\n  critical(component, message) {}\n  error(component, message) {}\n  warn(component, message) {}\n  notice(component, message) {}\n  info(component, message) {}\n  debug(component, message) {}\n  trace(component, message) {}\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? exports.SeverityLevel.OFF;\n    return {\n      componentSeverities: {\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n        serverSelection: parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n        connection: parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength: (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"names":["stream_1","require","utils_1","exports","SeverityLevel","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","MongoLoggableComponent","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","resolveLogPath","_ref","_ref2","MONGODB_LOG_PATH","mongodbLogPath","isValidLogDestinationString","destination","process","stderr","stdout","Writable","MongoLogger","constructor","options","componentSeverities","maxDocumentLength","logDestination","emergency","component","message","alert","critical","error","warn","notice","info","debug","trace","resolveOptions","envOptions","clientOptions","combinedOptions","defaultSeverity","MONGODB_LOG_ALL","command","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","default","parseUnsignedInteger","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["C:\\Users\\oria3\\node_modules\\mongodb\\src\\mongo_logger.ts"],"sourcesContent":["import { Writable } from 'stream';\n\nimport { parseUnsignedInteger } from './utils';\n\n/** @internal */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport type SeverityLevel = typeof SeverityLevel[keyof typeof SeverityLevel];\n\n/** @internal */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n} as const);\n\n/** @internal */\nexport type MongoLoggableComponent =\n  typeof MongoLoggableComponent[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | Writable;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: Writable;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively.\n *\n * @returns the Writable stream to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  {\n    mongodbLogPath\n  }: {\n    mongodbLogPath?: unknown;\n  }\n): Writable {\n  const isValidLogDestinationString = (destination: string) =>\n    ['stdout', 'stderr'].includes(destination.toLowerCase());\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n\n  // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof Writable) {\n    return mongodbLogPath;\n  }\n\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n\n  return process.stderr;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: Writable;\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  emergency(component: any, message: any): void {}\n\n  alert(component: any, message: any): void {}\n\n  critical(component: any, message: any): void {}\n\n  error(component: any, message: any): void {}\n\n  warn(component: any, message: any): void {}\n\n  notice(component: any, message: any): void {}\n\n  info(component: any, message: any): void {}\n\n  debug(component: any, message: any): void {}\n\n  trace(component: any, message: any): void {}\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity =\n      parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? SeverityLevel.OFF;\n\n    return {\n      componentSeverities: {\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n        serverSelection:\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n        connection:\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}