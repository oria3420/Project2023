{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.executeOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst server_selection_1 = require(\"../sdam/server_selection\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\nfunction executeOperation(client, operation, callback) {\n  return (0, utils_1.maybeCallback)(() => executeOperationAsync(client, operation), callback);\n}\nexports.executeOperation = executeOperation;\nasync function executeOperationAsync(client, operation) {\n  if (!(operation instanceof operation_1.AbstractOperation)) {\n    // TODO(NODE-3483): Extend MongoRuntimeError\n    throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n  }\n  if (client.topology == null) {\n    // Auto connect on operation\n    if (client.s.hasBeenClosed) {\n      throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n    }\n    client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n    try {\n      await client.connect();\n    } finally {\n      delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n    }\n  }\n  const {\n    topology\n  } = client;\n  if (topology == null) {\n    throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n  }\n  if (topology.shouldCheckForSessionSupport()) {\n    await topology.selectServerAsync(read_preference_1.ReadPreference.primaryPreferred, {});\n  }\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session = operation.session;\n  let owner;\n  if (topology.hasSessionSupport()) {\n    if (session == null) {\n      owner = Symbol();\n      session = client.startSession({\n        owner,\n        explicit: false\n      });\n    } else if (session.hasEnded) {\n      throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n      throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n  } else {\n    // no session support\n    if (session && session.explicit) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n    } else if (session && !session.explicit) {\n      // We do not have to worry about ending the session because the server session has not been acquired yet\n      delete operation.options.session;\n      operation.clearSession();\n      session = undefined;\n    }\n  }\n  const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n  const inTransaction = !!session?.inTransaction();\n  if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n    throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n  }\n  if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n    session.unpin();\n  }\n  let selector;\n  if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n    // GetMore and KillCursor operations must always select the same server, but run through\n    // server selection to potentially force monitor checks if the server is\n    // in an unknown state.\n    selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n  } else if (operation.trySecondaryWrite) {\n    // If operation should try to write to secondary use the custom server selector\n    // otherwise provide the read preference.\n    selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n  } else {\n    selector = readPreference;\n  }\n  const server = await topology.selectServerAsync(selector, {\n    session\n  });\n  if (session == null) {\n    // No session also means it is not retryable, early exit\n    return operation.executeAsync(server, undefined);\n  }\n  if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n    // non-retryable operation, early exit\n    try {\n      return await operation.executeAsync(server, session);\n    } finally {\n      if (session?.owner != null && session.owner === owner) {\n        await session.endSession().catch(() => null);\n      }\n    }\n  }\n  const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n  const willRetryWrite = topology.s.options.retryWrites && !inTransaction && (0, utils_1.supportsRetryableWrites)(server) && operation.canRetryWrite;\n  const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n  const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n  const willRetry = hasReadAspect && willRetryRead || hasWriteAspect && willRetryWrite;\n  if (hasWriteAspect && willRetryWrite) {\n    operation.options.willRetryWrite = true;\n    session.incrementTransactionNumber();\n  }\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (operationError) {\n    if (willRetry && operationError instanceof error_1.MongoError) {\n      return await retryOperation(operation, operationError, {\n        session,\n        topology,\n        selector\n      });\n    }\n    throw operationError;\n  } finally {\n    if (session?.owner != null && session.owner === owner) {\n      await session.endSession().catch(() => null);\n    }\n  }\n}\nasync function retryOperation(operation, originalError, _ref) {\n  let {\n    session,\n    topology,\n    selector\n  } = _ref;\n  const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n  const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n  if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n    throw new error_1.MongoServerError({\n      message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      originalError\n    });\n  }\n  if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n    throw originalError;\n  }\n  if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n    throw originalError;\n  }\n  if (originalError instanceof error_1.MongoNetworkError && session.isPinned && !session.inTransaction() && operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n    // If we have a cursor and the initial command fails with a network error,\n    // we can retry it on another connection. So we need to check it back in, clear the\n    // pool for the service id, and retry again.\n    session.unpin({\n      force: true,\n      forceClear: true\n    });\n  }\n  // select a new server, and attempt to retry the operation\n  const server = await topology.selectServerAsync(selector, {\n    session\n  });\n  if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n    throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n  }\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (retryError) {\n    if (retryError instanceof error_1.MongoError && retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n      throw originalError;\n    }\n    throw retryError;\n  }\n}","map":{"version":3,"names":["error_1","require","read_preference_1","server_selection_1","utils_1","operation_1","MMAPv1_RETRY_WRITES_ERROR_CODE","MONGODB_ERROR_CODES","IllegalOperation","MMAPv1_RETRY_WRITES_ERROR_MESSAGE","executeOperation","client","operation","callback","maybeCallback","executeOperationAsync","exports","AbstractOperation","MongoRuntimeError","topology","s","hasBeenClosed","MongoNotConnectedError","options","Symbol","for","connect","shouldCheckForSessionSupport","selectServerAsync","ReadPreference","primaryPreferred","session","owner","hasSessionSupport","startSession","explicit","hasEnded","MongoExpiredSessionError","snapshotEnabled","capabilities","supportsSnapshotReads","MongoCompatibilityError","clearSession","undefined","readPreference","primary","inTransaction","equals","MongoTransactionError","mode","isPinned","transaction","isCommitted","bypassPinningCheck","unpin","selector","hasAspect","Aspect","MUST_SELECT_SAME_SERVER","sameServerSelector","server","description","trySecondaryWrite","secondaryWritableServerSelector","commonWireVersion","executeAsync","RETRYABLE","endSession","catch","willRetryRead","retryReads","canRetryRead","willRetryWrite","retryWrites","supportsRetryableWrites","canRetryWrite","hasReadAspect","READ_OPERATION","hasWriteAspect","WRITE_OPERATION","willRetry","incrementTransactionNumber","operationError","MongoError","retryOperation","originalError","_ref","isWriteOperation","isReadOperation","code","MongoServerError","message","errmsg","isRetryableWriteError","isRetryableReadError","MongoNetworkError","CURSOR_CREATING","force","forceClear","MongoUnexpectedServerResponseError","retryError","hasErrorLabel","MongoErrorLabel","NoWritesPerformed"],"sources":["C:\\Users\\oria3\\node_modules\\mongodb\\src\\operations\\execute_operation.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport {\n  isRetryableReadError,\n  isRetryableWriteError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoNetworkError,\n  MongoNotConnectedError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoUnexpectedServerResponseError\n} from '../error';\nimport type { MongoClient } from '../mongo_client';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport {\n  sameServerSelector,\n  secondaryWritableServerSelector,\n  ServerSelector\n} from '../sdam/server_selection';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maybeCallback, supportsRetryableWrites } from '../utils';\nimport { AbstractOperation, Aspect } from './operation';\n\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE =\n  'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\ntype ResultTypeFromOperation<TOperation> = TOperation extends AbstractOperation<infer K>\n  ? K\n  : never;\n\n/** @internal */\nexport interface ExecutionResult {\n  /** The server selected for the operation */\n  server: Server;\n  /** The session used for this operation, may be implicitly created */\n  session?: ClientSession;\n  /** The raw server response for the operation */\n  response: Document;\n}\n\n/**\n * Executes the given operation with provided arguments.\n * @internal\n *\n * @remarks\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param topology - The topology to execute this operation on\n * @param operation - The operation to execute\n * @param callback - The command result callback\n */\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T): Promise<TResult>;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback: Callback<TResult>): void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback?: Callback<TResult>): Promise<TResult> | void;\nexport function executeOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T, callback?: Callback<TResult>): Promise<TResult> | void {\n  return maybeCallback(() => executeOperationAsync(client, operation), callback);\n}\n\nasync function executeOperationAsync<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(client: MongoClient, operation: T): Promise<TResult> {\n  if (!(operation instanceof AbstractOperation)) {\n    // TODO(NODE-3483): Extend MongoRuntimeError\n    throw new MongoRuntimeError('This method requires a valid operation instance');\n  }\n\n  if (client.topology == null) {\n    // Auto connect on operation\n    if (client.s.hasBeenClosed) {\n      throw new MongoNotConnectedError('Client must be connected before running operations');\n    }\n    client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n    try {\n      await client.connect();\n    } finally {\n      delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n    }\n  }\n\n  const { topology } = client;\n  if (topology == null) {\n    throw new MongoRuntimeError('client.connect did not create a topology but also did not throw');\n  }\n\n  if (topology.shouldCheckForSessionSupport()) {\n    await topology.selectServerAsync(ReadPreference.primaryPreferred, {});\n  }\n\n  // The driver sessions spec mandates that we implicitly create sessions for operations\n  // that are not explicitly provided with a session.\n  let session = operation.session;\n  let owner: symbol | undefined;\n  if (topology.hasSessionSupport()) {\n    if (session == null) {\n      owner = Symbol();\n      session = client.startSession({ owner, explicit: false });\n    } else if (session.hasEnded) {\n      throw new MongoExpiredSessionError('Use of expired sessions is not permitted');\n    } else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n      throw new MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n  } else {\n    // no session support\n    if (session && session.explicit) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      throw new MongoCompatibilityError('Current topology does not support sessions');\n    } else if (session && !session.explicit) {\n      // We do not have to worry about ending the session because the server session has not been acquired yet\n      delete operation.options.session;\n      operation.clearSession();\n      session = undefined;\n    }\n  }\n\n  const readPreference = operation.readPreference ?? ReadPreference.primary;\n  const inTransaction = !!session?.inTransaction();\n\n  if (inTransaction && !readPreference.equals(ReadPreference.primary)) {\n    throw new MongoTransactionError(\n      `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n    );\n  }\n\n  if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n    session.unpin();\n  }\n\n  let selector: ReadPreference | ServerSelector;\n\n  if (operation.hasAspect(Aspect.MUST_SELECT_SAME_SERVER)) {\n    // GetMore and KillCursor operations must always select the same server, but run through\n    // server selection to potentially force monitor checks if the server is\n    // in an unknown state.\n    selector = sameServerSelector(operation.server?.description);\n  } else if (operation.trySecondaryWrite) {\n    // If operation should try to write to secondary use the custom server selector\n    // otherwise provide the read preference.\n    selector = secondaryWritableServerSelector(topology.commonWireVersion, readPreference);\n  } else {\n    selector = readPreference;\n  }\n\n  const server = await topology.selectServerAsync(selector, { session });\n\n  if (session == null) {\n    // No session also means it is not retryable, early exit\n    return operation.executeAsync(server, undefined);\n  }\n\n  if (!operation.hasAspect(Aspect.RETRYABLE)) {\n    // non-retryable operation, early exit\n    try {\n      return await operation.executeAsync(server, session);\n    } finally {\n      if (session?.owner != null && session.owner === owner) {\n        await session.endSession().catch(() => null);\n      }\n    }\n  }\n\n  const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n\n  const willRetryWrite =\n    topology.s.options.retryWrites &&\n    !inTransaction &&\n    supportsRetryableWrites(server) &&\n    operation.canRetryWrite;\n\n  const hasReadAspect = operation.hasAspect(Aspect.READ_OPERATION);\n  const hasWriteAspect = operation.hasAspect(Aspect.WRITE_OPERATION);\n  const willRetry = (hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite);\n\n  if (hasWriteAspect && willRetryWrite) {\n    operation.options.willRetryWrite = true;\n    session.incrementTransactionNumber();\n  }\n\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (operationError) {\n    if (willRetry && operationError instanceof MongoError) {\n      return await retryOperation(operation, operationError, {\n        session,\n        topology,\n        selector\n      });\n    }\n    throw operationError;\n  } finally {\n    if (session?.owner != null && session.owner === owner) {\n      await session.endSession().catch(() => null);\n    }\n  }\n}\n\n/** @internal */\ntype RetryOptions = {\n  session: ClientSession;\n  topology: Topology;\n  selector: ReadPreference | ServerSelector;\n};\n\nasync function retryOperation<\n  T extends AbstractOperation<TResult>,\n  TResult = ResultTypeFromOperation<T>\n>(\n  operation: T,\n  originalError: MongoError,\n  { session, topology, selector }: RetryOptions\n): Promise<TResult> {\n  const isWriteOperation = operation.hasAspect(Aspect.WRITE_OPERATION);\n  const isReadOperation = operation.hasAspect(Aspect.READ_OPERATION);\n\n  if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n    throw new MongoServerError({\n      message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n      originalError\n    });\n  }\n\n  if (isWriteOperation && !isRetryableWriteError(originalError)) {\n    throw originalError;\n  }\n\n  if (isReadOperation && !isRetryableReadError(originalError)) {\n    throw originalError;\n  }\n\n  if (\n    originalError instanceof MongoNetworkError &&\n    session.isPinned &&\n    !session.inTransaction() &&\n    operation.hasAspect(Aspect.CURSOR_CREATING)\n  ) {\n    // If we have a cursor and the initial command fails with a network error,\n    // we can retry it on another connection. So we need to check it back in, clear the\n    // pool for the service id, and retry again.\n    session.unpin({ force: true, forceClear: true });\n  }\n\n  // select a new server, and attempt to retry the operation\n  const server = await topology.selectServerAsync(selector, { session });\n\n  if (isWriteOperation && !supportsRetryableWrites(server)) {\n    throw new MongoUnexpectedServerResponseError(\n      'Selected server does not support retryable writes'\n    );\n  }\n\n  try {\n    return await operation.executeAsync(server, session);\n  } catch (retryError) {\n    if (\n      retryError instanceof MongoError &&\n      retryError.hasErrorLabel(MongoErrorLabel.NoWritesPerformed)\n    ) {\n      throw originalError;\n    }\n    throw retryError;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}